<!-- HTML Structure -->
<!-- Div to place the toast message inside -->
<div id="toast"></div>
<!-- Start the scoreboard structure -->
<div class="tab-pane fade text-white show active" id="nav-live-scoreboard" role="tabpanel"
  aria-labelledby="nav-live-scoreboard-tab">
  <div id="live-scoreboard" class="table-responsive">
    <!-- Table for the live results -->
    <table class="table table-dark table-hover">
      <thead>
        <tr>
          <th scope="col">Rank</th>
          <th scope="col">Name</th>
          <th scope="col">Achievements</th>
          <th scope="col">Score</th>
          <th scope="col">Time</th>
        </tr>
      </thead>
      <tbody id="live-results">
        <!-- The scoreboard updates will be appended here -->
      </tbody>
    </table>
  </div>
</div>
<!-- JavaScript Code -->
<script>
  // --------------
  // Initialization
  // --------------
  window.addEventListener('load', initialize);

  function initialize() {
    // Initial results from the server
    results = <%- JSON.stringify(locals.liveResults) %>;
    // Update the scoreboard with the initial results
    updateScores(results);
    // Setup EventSource for live updates
    setupEventSource();
  }

  // ------------------
  // Event Source Setup
  // ------------------
  function setupEventSource() {
    const courseInstanceId = '<%= course_instance.id %>';
    const source = new EventSource(`/pl/course_instance/${courseInstanceId}/plrStudent/live_updates`);

    source.addEventListener('error', handleEventSourceError);
    source.onmessage = logServerMessage;
    source.addEventListener('scores', handleScoreUpdates, false);
    source.addEventListener('connected', handleConnectedUsers, false);
  }

  // --------------
  // Event Handlers
  // --------------
  function handleEventSourceError(e) {
    console.error('EventSource failed:', e);
  }

  function logServerMessage(event) {
    console.log('got a message from server!');
  }

  function handleScoreUpdates(event) {
    try {
      const data = JSON.parse(event.data);
      console.log('Receiving data: ', data);
      updateScores(data);
    } catch (error) {
      console.error('Error parsing JSON: ', error);
    }
  }

  function handleConnectedUsers(event) {
    const data = JSON.parse(event.data);
    const currentUserElement = document.getElementById('current-user');
    currentUserElement.textContent = `Connected users: ${data}`;
  }

  // -------------------
  // UI Update Functions
  // -------------------
  // Track notified scores to prevent duplicate toast notifications
  let notifiedScores = new Set();

  function updateScores(scores) {
    const tableBody = document.querySelector('#live-results');
    tableBody.innerHTML = '';
    scores = getCourseRelevant(scores);

    if (scores.length === 0) {
      const row = document.createElement('tr');
      const cell = document.createElement('td');
      cell.setAttribute('colspan', '5');
      cell.textContent = 'No live scores available.';
      row.appendChild(cell);
      tableBody.appendChild(row);
      return;
    }

    scores.forEach((score, index) => {
      // Give a unique identifier for each score
      const scoreIdentifier = `${score.identifier}-${score.points}`;
      // If a score has changed, notify the user with a toast, and add it to the notified scores set
      if (score.points !== 0 && !notifiedScores.has(scoreIdentifier)) {
        const message = `${score.display_name} reached ${score.points} points!`;
        showToast(message);
        notifiedScores.add(scoreIdentifier);
      }

      const row = document.createElement('tr');
      row.appendChild(createCell('th', index + 1, 'row')); // Rank
      row.appendChild(createCell('td', score.display_name)); // Name
      row.appendChild(createAchievementCell(score.achievements)); // Achievements
      row.appendChild(createCell('td', Math.round(score.points).toLocaleString("en-US"))); // Score
      row.appendChild(createTimeCell(score.duration)); // Time

      // Style the row based on rank (Gold/Silver/Bronze) and current user
      styleRankRow(row, index, score.display_name);
      tableBody.appendChild(row);
    });
  }

  function showToast(message) {
    var toast = document.getElementById("toast");
    toast.textContent = message;
    toast.className = "show";
    // Show toast for 3 seconds, then disappear
    setTimeout(function () { toast.className = toast.className.replace("show", ""); }, 3000);
  }

  function createCell(type, text, scope) {
    const cell = document.createElement(type);
    if (scope) {
      cell.setAttribute('scope', scope);
    }
    cell.textContent = text;
    return cell;
  }

  function createAchievementCell(achievements) {
    const achievementCell = document.createElement('td');
    if (achievements) {
      achievements.forEach(achievement => {
        const badgeSpan = document.createElement('span');
        badgeSpan.className = 'material-symbols-outlined align-bottom';
        badgeSpan.textContent = achievement;
        achievementCell.appendChild(badgeSpan);
      });
    } else {
      const noBadgeParagraph = document.createElement('p');
      noBadgeParagraph.textContent = 'No achievements earned.';
      achievementCell.appendChild(noBadgeParagraph);
    }
    return achievementCell;
  }

  function createTimeCell(time) {
    const timeCell = document.createElement('td');
    var formattedTime = "00:00";
    if (time.seconds !== undefined) {
      var formattedSeconds = time.seconds < 10 ? `0${time.seconds}` : String(time.seconds);
      formattedTime = `00:${formattedSeconds}`;
      if (time.minutes !== undefined) {
        var formattedMinutes = time.minutes < 10 ? `0${time.minutes}` : String(time.minutes);
        formattedTime = `${formattedMinutes}:${formattedSeconds}`;
      }
    }
    timeCell.textContent = formattedTime;
    return timeCell;
  }

  function styleRankRow(row, index, displayName) {
    if (index === 0) {
      row.classList.add('gold-rank');
    } else if (index === 1) {
      row.classList.add('silver-rank');
    } else if (index === 2) {
      row.classList.add('bronze-rank');
    }
    if (displayName === '<%= locals.displayName %>' && index > 2) {
      row.classList.add('current-user-cell');
    }
  }

  // -----------------
  // Utility Functions
  // -----------------
  function getCourseRelevant(results) {
    const realID = '<%= course_instance.id %>';
    return results.filter((results) => results.course_instance_id != realID);
  }

  // Handle closing the connection when the window is closed
  window.addEventListener('beforeunload', function () {
    var req = new XMLHttpRequest();
    req.open('POST', '/sse/close', false);
    var clientId = document.cookie.replace(/(?:(?:^|.*;\s*)clientId\s*=\s*([^;]*).*$)|^.*$/, '$1');
    req.send(JSON.stringify({ id: clientId }));
  });
</script>