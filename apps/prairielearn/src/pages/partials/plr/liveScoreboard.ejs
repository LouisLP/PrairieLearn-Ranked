<div
  class="tab-pane fade text-white show active"
  id="nav-live-scoreboard"
  role="tabpanel"
  aria-labelledby="nav-live-scoreboard-tab"
>
  <div id="live-scoreboard" class="table-responsive">
    <table class="table table-dark table-hover">
      <thead>
        <tr>
          <th scope="col">Rank</th>
          <th scope="col">Name</th>
          <th scope="col">Achievements</th>
          <th scope="col">Score</th>
          <th scope="col">Time</th>
        </tr>
      </thead>
      <tbody id="live-results">
        <!-- The scoreboard updates will be appended here -->
      </tbody>
    </table>
  </div>
</div>
<script>
  // Initial results from the server
  results = <%- JSON.stringify(locals.liveResults) %>;
  // Update the scoreboard with the initial results
  updateScores(results);
  // Grab the course instance id from the page
  const courseInstanceId = '<%= course_instance.id %>';
  // EventSource for live updates
  const source = new EventSource(`/pl/course_instance/${courseInstanceId}/plrStudent/live_updates`);

  // Handle errors in the connection
  source.addEventListener('error', function (e) {
    console.error('EventSource failed:', e);
  });
  // Log messages from the server
  source.onmessage = function (event) {
    console.log('got a message from server!');
  };
  // Listen for updates to the scoreboard
  source.addEventListener(
    'scores',
    function (event) {
      try {
        const data = JSON.parse(event.data);
        console.log('Receiving data: ', data);
        updateScores(data);
      } catch (error) {
        console.error('Error parsing JSON: ', error);
      }
    },
    false,
  );
  // Listen for updates to the number of connected users
  source.addEventListener(
    'connected',
    function (event) {
      const data = JSON.parse(event.data);
      const currentUserElement = document.getElementById('current-user');
      currentUserElement.textContent = `Connected users: ${data}`;
    },
    false,
  );
  // Function to update the live scoreboard
  function updateScores(scores) {
    // Get the table body
    const tableBody = document.querySelector('#live-results');
    tableBody.innerHTML = '';
    // Filter out scores that are not for this course instance
    scores = getCourseRelevant(scores);
    // Handle empty scores
    if (scores.length === 0) {
      const row = document.createElement('tr');
      const cell = document.createElement('td');
      cell.setAttribute('colspan', '5');
      cell.textContent = 'No live scores available.';
      row.appendChild(cell);
      tableBody.appendChild(row);
    }
    // Iterate through the scores and add them to the table
    scores.forEach((score, index) => {
      const row = document.createElement('tr');
      const rankCell = document.createElement('th');
      const nameCell = document.createElement('td');
      const scoreCell = document.createElement('td');

      // Set the content of each cell
      rankCell.setAttribute('scope', 'row');
      rankCell.textContent = score.rank;
      nameCell.textContent = score.display_name;
      var number = 1340.00000111;
      scoreCell.textContent = Math.round(score.points).toLocaleString("en-US");

      // Create achievement and time cells (done in functions)
      const achievementCell = createAchievementCell(score.achievements);
      const timeCell = createTimeCell(score.duration);

      // Add the cells to the row
      row.appendChild(rankCell);
      row.appendChild(nameCell);
      row.appendChild(achievementCell);
      row.appendChild(scoreCell);
      row.appendChild(timeCell);

       // Add CSS classes to highlight the top three ranks with gold, silver, and bronze borders
       if (index === 0) {
        row.classList.add('gold-rank');
      } else if (index === 1) {
        row.classList.add('silver-rank');
      } else if (index === 2) {
        row.classList.add('bronze-rank');
      }

      //check current user and highlight the cell if they aren't in the first 3 spots
      if(score.display_name === '<%= locals.displayName %>' && index > 2)
      {
        row.classList.add('current-user-cell');
      }
      
      tableBody.appendChild(row);
    });
  }

  // Handle closing the connection when the window is closed
  window.addEventListener('beforeunload', function () {
    var req = new XMLHttpRequest();

    req.open('POST', '/sse/close', false);

    var clientId = document.cookie.replace(/(?:(?:^|.*;\s*)clientId\s*=\s*([^;]*).*$)|^.*$/, '$1');

    req.send(JSON.stringify({ id: clientId }));
  });

  // Filter out scores that are not for this course instance
  function getCourseRelevant(results){
    const realID = '<%= course_instance.id %>';
    return results.filter((results) => results.course_instance_id != realID);
  }
  // Achievements are more complex to go through each one
  function createAchievementCell(achievements) {
    const achievementCell = document.createElement('td');
    if (achievements) {
      achievements.forEach(achievement => {
        const badgeSpan = document.createElement('span');
        badgeSpan.className = 'material-symbols-outlined align-bottom';
        badgeSpan.textContent = achievement;
        achievementCell.appendChild(badgeSpan);
      });
    } else {
      const noBadgeParagraph = document.createElement('p');
      noBadgeParagraph.textContent = 'No achievements earned.';
      achievementCell.appendChild(noBadgeParagraph);
    }
    return achievementCell;
  }
  // Time is also more complex to format the time
  function createTimeCell(time) {
    const timeCell = document.createElement('td');
    var formattedTime = "00:00";
    if (time.seconds !== undefined) {
      var formattedSeconds = time.seconds < 10 ? `0${time.seconds}` : String(time.seconds);
      formattedTime = `00:${formattedSeconds}`;
      if (time.minutes !== undefined) {
        var formattedMinutes = time.minutes < 10 ? `0${time.minutes}` : String(time.minutes);
        formattedTime = `${formattedMinutes}:${formattedSeconds}`;
      }
    }
    timeCell.textContent = formattedTime;
    return timeCell;
  }
</script>
